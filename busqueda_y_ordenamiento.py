# -*- coding: utf-8 -*-
"""Busqueda y Ordenamiento

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nQZAffFyoZh2cKdnc8gfti1B6p20BAwU
"""

import numpy as np
# Pedimos un arreglo por parametro, guardamos 2 posiciones del arreglo y tenemos las pasadas por el arreglo
def ordenamientoBurbuja(arreglo, posicion1 = 0, posicion2 = 1, pasadas = 0):
  if (pasadas == 2):
    return arreglo
  else:
    #Caso base: si la posicion 1 es igual a len del arreglo menos 1
    if (posicion1 == len(arreglo) - 1):
      return arreglo
    else:
      # Compara si la posicion 1 es mayor que la posicion 2
      if (arreglo[posicion1] > arreglo[posicion2]):
        # Guardamos en un aux la posicion 1, para no perderla
        aux = arreglo[posicion1]
        # Ponemos la posicion 2 en la posicion 1
        arreglo[posicion1] = arreglo[posicion2]
        # La posicion 1 aux la ponemos en posicion 2
        arreglo[posicion2] = aux
        #Recursividad
        ordenamientoBurbuja(arreglo, posicion1 + 1, posicion2 + 1)
      else:
        #Recursividad
        ordenamientoBurbuja(arreglo, posicion1 + 1, posicion2 + 1)
    #Recursividad de pasada
    ordenamientoBurbuja(arreglo, posicion1, posicion2, pasadas + 1)
  #Devolvemos el arreglo ordenado
  return arreglo

#Cuando tenemos el arreglo ordenado, podemos pasar a la parte de busqueda binaria
def busquedaBinaria(arreglo, item):
  if (len(arreglo) > 0):
    mitadArreglo = int(len(arreglo) // 2)
    elementoMitad = arreglo[mitadArreglo]
    if (elementoMitad == item):
      return 'Elemento encontrado!'
    else:
      if (elementoMitad > item):
        return  busquedaBinaria(arreglo[:mitadArreglo], item)
      else:
        return busquedaBinaria(arreglo[mitadArreglo+1:], item)
  else:
    return 'Elemento no encontrado!'

def busquedaBinaria2(arreglo, item):
    comienzo = 0
    final = len(arreglo)-1 
    encontrado = False
    while (comienzo <= final and encontrado == False):
      elementoMitad = (comienzo + final) // 2
      if (arreglo[elementoMitad] == item):
        encontrado = True
        return elementoMitad
      else:
        if (arreglo[elementoMitad] > item):
          final = elementoMitad - 1
        else:
          comienzo = elementoMitad + 1
    return -1
    

def pedirNumerosFor():
    cantElementos = int(input("Cual es el tamaÃ±o del arreglo: "))
    arreglo = np.zeros(cantElementos)
    for i in range(len(arreglo)):
      elementoAIngresar = int(input('Ingrese un elemento al arreglo: '))
      arreglo[i] = elementoAIngresar
    return arreglo

def programaPrincipal():
  print('Ingrese un arreglo para comenzar!')
  arregloActual = pedirNumerosFor()
  eleccion = ''
  while (eleccion != 5):
    print('')
    print('MENU')
    print('Elija una opcion: ')
    print('1_ Ordenar arreglo')
    print('2_ Comprobar si un elemento se encuentra en el arreglo')
    print('3_ Ver la posicion en la que se encuentra un elemento en el arreglo')
    print('4_ Cambiar arreglo')
    print('5_ Salir')
    print()
    eleccion = int(input('Seleccione una opcion: '))
    if (eleccion == 1):
      print('Arreglo original: ', arregloActual)
      arregloOrdenado = ordenamientoBurbuja(arregloActual)
      print ('Arreglo ordenado: ', arregloOrdenado)
      print()
    elif (eleccion == 2):
      print('Arreglo original: ', arregloActual)
      arregloOrdenado = ordenamientoBurbuja(arregloActual)
      print('Arreglo ordenado: ', arregloOrdenado)
      elementoBuscadoPosicion = busquedaBinaria(arregloOrdenado, int(input('Ingrese el numero que quiera buscar: ')))
      print(elementoBuscadoPosicion)
      print()
    elif (eleccion == 3):
      print('Arreglo original: ', arregloActual)
      arregloOrdenado = ordenamientoBurbuja(arregloActual)
      print('Arreglo ordenado: ', arregloOrdenado)
      elementoBuscadoPosicion = busquedaBinaria2(arregloOrdenado, int(input('Ingrese el numero que quiera buscar: ')))
      print(elementoBuscadoPosicion)
      print()   
    elif (eleccion == 4):
      arregloActual = pedirNumerosFor()
    elif (eleccion > 5 or eleccion < 1):
      print('Opcion invalida, vuelva a intentarlo')
      print()
  print('Gracias por elegirnos!')

programaPrincipal()